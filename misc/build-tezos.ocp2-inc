(* Script to build Tezos with ocp-build.

LAST COMMIT Tezos/gitlab: 67aac91d9f2286daa347716577f7b5e8c36d2da4

To use this script, checkout Tezos in a sub-directory `tezos/`, and
create a file `build.ocp2` in `tezos/src/` containing only:

```
include "../../misc/build-tezos.ocp2-inc";
```

*)

(* We want to use Posix threads when linking leveldb: *)
OCaml.library("threads", ocaml + {
                         generated = true;
                         dirname = "%{OCAMLLIB}%";
                         requires = [ "threads.posix" ];
  });



(* For now, disable webclient, since it does not compile *)
build_webclient = false;

List = module("ocp-build:List", "1.0");
OCaml = module("ocp-build:OCaml", "1.0");
Sys = module("ocp-build:Sys", "1.0");

has_securenv = Sys.file_exists(dirname + "/ppx/ppx_securenv.ml");
has_check = Sys.file_exists(dirname + "/minutils/check.ml");
has_liquidity = Sys.file_exists(dirname + "/liquidity");
has_liquidity = false;


if( has_liquidity ) {
  liquidity_files = [ "client_proto_programs_commands.ml" ];
} else {
  liquidity_files = [];
}


ocaml.debug = true;

compflags = [ "-bin-annot"; "-g"; "-thread"; "-short-paths"; "-safe-string";
                "-w"; "+27-30-40"; ];
min_opens = [
      "-open"; "Error_monad";
      "-open"; "Hash";
      "-open"; "Utils";
];

opens = min_opens + [
      "-open"; "Tezos_data";
];

basic_packages = [ "cstruct"; "lwt"; "ocplib-json-typed.bson";
      "ocplib-resto.directory"; "base64"; "calendar"; "ezjsonm";
      "ipaddr.unix"; "lwt.unix"; "mtime.clock.os"; "nocrypto";
      "sodium"; "zarith"; "compiler-libs.optcomp"; "lwt.unix";
      "ocplib-endian"; "ocplib-ocamlres"; "unix"; ];

more_packages = basic_packages + [ "calendar"; "cmdliner";
    "cohttp.lwt"; "dynlink"; "git"; (* "ipv6-multicast"; *) "irmin-unix";
    "ocplib-resto.directory"; "ssl"; "leveldb" ];

ocaml_without_opens = ocaml + {
    dep = [];
    bytecomp = compflags;
    asmcomp = compflags;
  };

ocaml_with_opens = ocaml + {
    dep = opens;
    bytecomp = compflags + opens;
    asmcomp = compflags + opens;
  };

if( has_securenv ){

  OCaml.program("ppx_securenv", {
     files = [ "ppx/ppx_securenv.ml" ];
     requires = [ "compiler-libs.common" ];
   });
  securenv_mls = [ "securenv.ml" ];
  securenv_mlis = [ "securenv.mli" ];
} else {
  securenv_mlis = [];
  securenv_mls = [];
}

if( has_check ){
    check_mls = [ "check.ml" ];
    check_mlis = [ "check.mli" ];
} else {
    check_mls = [];
    check_mlis = [];
}

function lib_with_opens(name, o){
  OCaml.library(name, ocaml_with_opens + o);
}

function lib_without_opens(name, o){
  OCaml.library(name, ocaml_without_opens + o);
}

function program_with_opens(name, o){
  OCaml.program(name, ocaml_with_opens + o);
}

function program_without_opens(name, o){
  OCaml.program(name, ocaml_without_opens + o);
}

lib_without_opens("irmin_leveldb", {
     subdir = "../vendors/irmin-leveldb";
     files = [ "irmin_leveldb.ml" ];
     requires = [ "irmin" ;"leveldb" ];
  });

lib_without_opens("minutils", {
                    subdir = "minutils";
                    files = securenv_mls + [
                        "compare.ml";
                        "mBytes.ml";
                        "hex_encode.ml";
                        "utils.ml";
                        ] + check_mls + [
                        "data_encoding.ml";
                        "RPC.ml"; ];
                    requires = [
                        "cstruct"; "lwt"; "ocplib-json-typed.bson";
                        "ocplib-resto.directory";
                      ];
                  });

OCaml.program("sigs_packer",
        ocaml + {
           files = [
                "environment/sigs_packer/sigs_packer.ml";
                ];
        });

begin
  mlis = [

    "pervasives.mli";
    "array.mli";
    "list.mli";
    "bytes.mli";
    "string.mli";
    "set.mli";
    "map.mli";
    "int32.mli";
    "int64.mli";
    "buffer.mli";
    "format.mli";

    "z.mli";
    "lwt_sequence.mli";
    "lwt.mli";
    "lwt_list.mli";


    "mBytes.mli";
    "hex_encode.mli";
    "compare.mli";
    "data_encoding.mli";
    "error_monad.mli";
    "micheline.mli";
    "logging.mli";
    "time.mli";
    "base58.mli";
    "hash.mli";
    "ed25519.mli";


    "tezos_data.mli";
    "context.mli";
    "RPC.mli";
    "updater.mli";

  ];

  mlis = List.map(
    function(file){ return ("environment/v1/" + file); },
                   mlis );

  generator = DSTDIR("sigs_packer",
                     "sigs_packer.byte");
  generated_file = "environment/tezos_protocol_environment_sigs__V1.ml";
  generated_file2 = "environment/tezos_protocol_environment_sigs.ml";
  env.build_rules = [
  
    generated_file, {
        build_target = true;
        sources = mlis + [ generator ];
        commands = [
           OCaml.system([generator] + mlis ,
                        { stdout = generated_file; });
         ];
      };
    generated_file2, {
        build_target = true;
        sources = [];
        commands = [
           OCaml.system( [
             "echo";
             "module V1 = Tezos_protocol_environment_sigs__V1"
             ],
                        { stdout = generated_file2; });
         ];
      };


  ];
  env.requires = [ "sigs_packer" ];
  OCaml.rules("proto", env);
end

lib_without_opens("utils", {
                    subdir = "utils";
                    files = [
                        "base58.ml";
                        "error_monad_sig.ml";
                        "error_monad.ml";
                        "cli_entries.ml";
                        "data_encoding_ezjsonm.ml";
                        "time.ml";
                        "hash.ml";
                        "crypto_box.ml";
                        "logging.ml";
                        "lwt_exit.ml";
                        "lwt_utils.ml";
                        "lwt_pipe.ml";
                        "IO.ml";
                        "moving_average.ml";
                        "ring.ml";
                        "watcher.ml";
                        "tezos_data.ml";
                        "lwt_dropbox.ml";
                      ];
                    requires = [
                        "minutils";
                      ] + basic_packages;
                  });

utils_packages = [ "utils"; "minutils" ];


begin

  compflags += [ ];

  OCaml.objects("sigs",
                ocaml + {

                  dep = opens;
                  bytecomp = compflags + opens;
                  asmcomp = compflags + opens;

                  files = [
                      "environment/tezos_protocol_environment_sigs__V1.ml", {
                          deps = [];
                          bytecomp = bytecomp + [ "-nopervasives" ];
                          asmcomp = asmcomp + [ "-nopervasives" ];
                      };

                      "environment/tezos_protocol_environment_sigs.ml",{
                          bytecomp = bytecomp + [ "-opaque" ] + opens;
                          asmcomp = asmcomp + [ "-opaque" ] + opens;
                        };
                    ];
                  requires = utils_packages +  [ "proto"; ];
                  });
end


lib_with_opens("micheline", ocaml + {
    files = [
      "micheline/micheline.ml";
      "micheline/micheline_parser.ml";
      "micheline/micheline_printer.ml";
    ];
    requires = utils_packages;
  });








function copy_file(src, dst){
  return 
      (dirname + "/" + dst, {
         sources = dirname + "/" + src;
         commands = [ OCaml.system(["cp"; "-f";
            dirname + "/" + src;
            dirname + "/" + dst ]) ];
      });
}

function make_aliases(dir, module, files)
{
  return List.map(
    function(file){
      return copy_file( dir + "/" + file[0],
                        dir + "/" + module + "__" + file[1]);
    }, files);
}

function lib_with_alias(
      libname,
      ocaml,
      descr
   ){
    modname = descr.modname;
    subdir = descr.subdir;
    mlis = descr.mlis;
    mls = descr.mls;
    requires = descr.requires;


    mods = List.map(function(ml){ return ml[1]; }, mls);
    inner_mods = List.map(function(mod){
      return modname + "__" + mod; }, mods);

    ocaml.bytecomp += [ "-no-alias-deps" ];
    ocaml.asmcomp  += [ "-no-alias-deps" ];
    special_deps = [
            "-I"; "%{" + libname + "_FULL_DST_DIR}%";
             "-open"; modname ];

    inside_opens = {
       bytecomp = ocaml.bytecomp + special_deps ;
       asmcomp = ocaml.asmcomp + special_deps;
       dep = ocaml.dep + special_deps;
       noimpldeps = [ modname ];
    };

    OCaml.library(libname,
      ocaml + {
        dep = opens;
        dirname = dirname + "/" + subdir;
        files = [
         libname + ".ml", {
           nodeps = inner_mods;
           noimpldeps = inner_mods;
         }
         ]
         +
         List.map(function(mli){
           return (libname + "__" + mli[1] + ".mli");
           }, mlis) 
         +
         List.map(function(ml){
           return (libname + "__" + ml[1] + ".ml", inside_opens);
           }, mls);

         requires = requires;

    build_rules =
      make_aliases(subdir,
        libname, 
        List.map(function(mli){
          return (mli[0], mli[1] + ".mli");},mlis))
      +  
      make_aliases(subdir,
        libname,
         List.map(function(ml){
           return (ml[0], ml[1] + ".ml");},mls))
      +
      [ libname + ".ml", {
          sources = [ ];
          commands = [
            OCaml.system(
            [ "echo" ] +
            List.map(function(ml){ return
                "module " + ml[1] + " = " + modname + "__" + ml[1] + "\n";
               }, mls),
            { stdout = libname + ".ml" }
            ) ]
            }]
     });
}


lib_with_alias(
      "tezos_protocol_compiler",
      ocaml_with_opens,
      {
        modname = "Tezos_protocol_compiler";
        subdir = "compiler";

           mlis = [
             "embedded_cmis.mli", "Embedded_cmis";
             "packer.mli", "Packer";
             "native.mli", "Native";
             "registerer.mli", "Registerer";
           ];
           mls = [
             "embedded_cmis.ml", "Embedded_cmis";
             "packer.ml", "Packer";
             "native.ml", "Native";
             "registerer.ml", "Registerer";
           ];
           requires = utils_packages + [ "sigs" ];
      }
   );

OCaml.rules("embedded",
  ocaml + {
    subdir = "compiler";
    build_rules = [
      "compiler/embedded_cmis.ml",
         {
           build_target = true;
           sources = [
             "%{OCAMLLIB}%/camlinternalFormatBasics.cmi";
             "%{sigs_FULL_DST_DIR}%/tezos_protocol_environment_sigs.cmi";
             "%{sigs_FULL_DST_DIR}%/tezos_protocol_environment_sigs__V1.cmi";
             "%{tezos_protocol_compiler_FULL_DST_DIR}%/tezos_protocol_compiler__Registerer.cmi";
           ];
           commands = [
             OCaml.system(
               [
                   "ocp-ocamlres"; "-format"; "ocaml";
                   "-o"; "compiler/embedded_cmis.ml";
                   "%{OCAMLLIB}%/camlinternalFormatBasics.cmi";
                   "%{sigs_FULL_DST_DIR}%/tezos_protocol_environment_sigs.cmi";
                   "%{sigs_FULL_DST_DIR}%/tezos_protocol_environment_sigs__V1.cmi";
                   "%{tezos_protocol_compiler_FULL_DST_DIR}%/tezos_protocol_compiler__Registerer.cmi";
               ]
                            );
                        ];
                    };
                  ];
    requires = [ "sigs"; "tezos_protocol_compiler" ];
  });






program_with_opens("compiler_main", {
    files = [
        "compiler_main.ml"
      ];
    requires = [
      "tezos_protocol_compiler";
      ] + utils_packages;
  });








lib_with_opens("node_db",
  {
    files = [
    "node/db/context.ml";
    "node/db/raw_store.ml";
    "node/db/store_sigs.ml";
    "node/db/store_helpers.ml";
    "node/db/store.ml";
    ];
    requires = utils_packages +
             [ "irmin_leveldb" ];
  });





lib_with_opens("node_updater",
  {
    files = [
    "node/updater/register.ml";
    "node/updater/updater.ml";
    "node/updater/tezos_protocol_environment.ml";
    ];
    requires = utils_packages +
             [ "node_db"; "sigs"; "micheline"; "tezos_protocol_compiler" ];
  });

begin
  function make_env(proto){
    return [
    "proto/" + proto + "/environment.ml", {
       sources = [];
       commands = [
         OCaml.system([
           "echo";
           "include Tezos_protocol_environment.Make(struct let name = \"" +
           proto + "\" end)()"
         ],
         { stdout = "proto/" + proto + "/environment.ml" }
         )
       ];
    };
  ];
  }
  
  function make_registerer(proto, key){
    return [
    "proto/" + proto + "/registerer.ml", {
       sources = [];
       commands = [
         OCaml.system([
           "echo";
           "let () = 
  let module Ignored = State.Register_embedded_protocol
    (Tezos_protocol_environment_" + proto + ".Environment)
    (Tezos_embedded_raw_protocol_" + proto + ".Main)
    (struct
       let hash =
         Some (Hash.Protocol_hash.of_b58check_exn
                 \"" + key + "\")
       let sources = Tezos_data.Protocol.{
         expected_env = V1 ;
         components = [(* FIXME ?? *)] ;
                     } end) in ()"

         ],
         { stdout = "proto/" + proto + "/registerer.ml" }
         )
       ];
    };
  ];
  }

  build_rules =
              make_env("alpha") +
              make_env("genesis") +
              make_env("demo") +
              make_registerer("alpha",
                "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK") +
              make_registerer("genesis",
                "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im") +
              make_registerer("demo",
                "ProtoDemoDemoDemoDemoDemoDemoDemoDemoDemoDemoD3c8k9") 
             ;
  OCaml.rules("envs", { build_rules = build_rules });
end

lib_with_alias(
      "tezos_protocol_environment_alpha",
      ocaml_with_opens,
      {
        modname = "Tezos_protocol_environment_alpha";
        subdir = "proto/alpha";

           mlis = [
           ];
           mls = [
             "environment.ml", "Environment";
           ];
           requires = utils_packages + [ "envs";
                    "sigs"; "node_updater" ];
      }
   );



begin
  opens =    [
     "-I"; "%{utils_FULL_DST_DIR}%";
     "-I"; "%{minutils_FULL_DST_DIR}%";
     "-I"; "%{tezos_protocol_environment_alpha_FULL_DST_DIR}%";
     "-open"; "Tezos_protocol_environment_alpha__Environment" ];

OCaml.library(
   "tezos_embedded_raw_protocol_alpha",
   ocaml_with_opens +
        {
          dep = opens + ocaml_with_opens.dep;
          bytecomp = opens + ocaml_with_opens.bytecomp;
          asmcomp = opens + ocaml_with_opens.asmcomp;
          files = OCaml.pack("Tezos_embedded_raw_protocol_alpha",
             [
"proto/alpha/period_repr.ml";
"proto/alpha/qty_repr.ml";
"proto/alpha/tez_repr.ml";
"proto/alpha/constants_repr.ml";
"proto/alpha/tezos_hash.ml";
"proto/alpha/block_header_repr.ml";
"proto/alpha/contract_repr.ml";
"proto/alpha/manager_repr.ml";
"proto/alpha/cycle_repr.ml";
"proto/alpha/raw_level_repr.ml";
"proto/alpha/voting_period_repr.ml";
"proto/alpha/level_repr.ml";
"proto/alpha/fitness_repr.ml";
"proto/alpha/raw_context.ml";
"proto/alpha/seed_repr.ml";
"proto/alpha/roll_repr.ml";
"proto/alpha/level_storage.ml";
"proto/alpha/michelson_v1_primitives.ml";
"proto/alpha/script_repr.ml";
"proto/alpha/misc.ml";
"proto/alpha/storage_sigs.ml";
"proto/alpha/storage_functors.ml";
"proto/alpha/time_repr.ml";
"proto/alpha/vote_repr.ml";
"proto/alpha/storage.ml";
"proto/alpha/seed_storage.ml";
"proto/alpha/roll_storage.ml";
"proto/alpha/contract_storage.ml";
"proto/alpha/bootstrap_storage.ml";
"proto/alpha/fitness_storage.ml";
"proto/alpha/reward_storage.ml";
"proto/alpha/vote_storage.ml";
"proto/alpha/init_storage.ml";
"proto/alpha/nonce_storage.ml";
"proto/alpha/operation_repr.ml";
"proto/alpha/public_key_storage.ml";
"proto/alpha/script_int_repr.ml";
"proto/alpha/script_timestamp_repr.ml";
"proto/alpha/tezos_context.ml";
"proto/alpha/amendment.ml";
"proto/alpha/baking.ml";
"proto/alpha/script_typed_ir.ml";
"proto/alpha/script_ir_translator.ml";
"proto/alpha/script_interpreter.ml";
"proto/alpha/apply.ml";
"proto/alpha/services.ml";
"proto/alpha/services_registration.ml";
"proto/alpha/main.ml";
        ]);
        requires = utils_packages + [
                    "sigs"; "node_updater";
                    "tezos_protocol_environment_alpha";
         ];
         });
end


lib_with_alias(
      "tezos_protocol_environment_genesis",
      ocaml_with_opens,
      {
        modname = "Tezos_protocol_environment_genesis";
        subdir = "proto/genesis";

           mlis = [
           ];
           mls = [
             "environment.ml", "Environment";
           ];
           requires = utils_packages + [ "envs";
                    "sigs"; "node_updater" ];
      }
   );

lib_with_alias(
      "tezos_protocol_environment_demo",
      ocaml_with_opens,
      {
        modname = "Tezos_protocol_environment_demo";
        subdir = "proto/demo";

           mlis = [
           ];
           mls = [
             "environment.ml", "Environment";
           ];
           requires = utils_packages + [ "envs";
                    "sigs"; "node_updater" ];
      }
   );


lib_with_opens("node_net",
  ocaml + {
    files = [
                     "node/net/p2p_types.ml";
                     "node/net/p2p_io_scheduler.ml";
                     "node/net/p2p_connection.ml";
                     "node/net/p2p_connection_pool_types.ml";
                     "node/net/p2p_connection_pool.ml";
                     "node/net/p2p_welcome.ml";
                     "node/net/p2p_discovery.ml";
                     "node/net/p2p_maintenance.ml";
                     "node/net/p2p.ml";
                     "node/net/RPC_server.ml";

    ];
    requires = more_packages + [
       "minutils"; "utils"; "proto"; "sigs";
       "node_db";
    ];
    });

begin
  opens =    [
     "-I"; "%{utils_FULL_DST_DIR}%";
     "-I"; "%{minutils_FULL_DST_DIR}%";
     "-I"; "%{tezos_protocol_environment_demo_FULL_DST_DIR}%";
     "-open"; "Tezos_protocol_environment_demo__Environment" ];
     
  lib_with_opens("tezos_embedded_raw_protocol_demo",
    ocaml + {
      dep = opens + ocaml_with_opens.dep;
      bytecomp = opens + ocaml_with_opens.bytecomp;
      asmcomp = opens + ocaml_with_opens.asmcomp;

    files = 
      OCaml.pack("Tezos_embedded_raw_protocol_demo", [
        "proto/demo/error.ml";
        "proto/demo/services.ml";
        "proto/demo/main.ml";
      ]);
    requires =  [
      "tezos_protocol_environment_demo";
    ];
  });
end


begin
  opens =    [
     "-I"; "%{utils_FULL_DST_DIR}%";
     "-I"; "%{minutils_FULL_DST_DIR}%";
     "-I"; "%{tezos_protocol_environment_genesis_FULL_DST_DIR}%";
     "-open"; "Tezos_protocol_environment_genesis__Environment" ];

  lib_with_opens("tezos_embedded_raw_protocol_genesis",
  ocaml + {
  dep = opens + ocaml_with_opens.dep;
  bytecomp = opens + ocaml_with_opens.bytecomp;
  asmcomp = opens + ocaml_with_opens.asmcomp;

    files = 
      OCaml.pack("Tezos_embedded_raw_protocol_genesis", [
        "proto/genesis/data.ml";
        "proto/genesis/services.ml";
        "proto/genesis/main.ml";
      ]);
    requires =  [
      "tezos_protocol_environment_genesis";
    ];
  });
end


lib_with_opens("node_shell",
  ocaml + {
    files = [
         "node/shell/state.ml";
         "node/shell/chain_traversal.ml";
         "node/shell/chain.ml";
         "node/shell/block_locator.ml";
         "node/shell/distributed_db_functors.ml";
         "node/shell/mempool.ml";
         "node/shell/distributed_db_message.ml";
         "node/shell/distributed_db_metadata.ml";
         "node/shell/distributed_db.ml";
         "node/shell/protocol_validator.ml";
         "node/shell/block_validator.ml";
         "node/shell/bootstrap_pipeline.ml";
         "node/shell/peer_validator.ml";
         "node/shell/prevalidation.ml";
         "node/shell/prevalidator.ml";
         "node/shell/net_validator.ml";
         "node/shell/node_rpc_services.ml";
         "node/shell/validator.ml";
         "node/shell/node.ml";
         "node/shell/node_rpc.ml";
    ];
    requires = [
       "minutils"; "utils"; "proto"; "sigs"; "node_net"; "node_updater";
    ];
    });


lib_with_alias(
      "tezos_embedded_protocol_genesis",
      ocaml_with_opens,
      {
        modname = "Tezos_embedded_protocol_genesis";
        subdir = "proto/genesis";

           mlis = [
           ];
           mls = [
             "registerer.ml", "Registerer";
           ];
           requires = utils_packages + [
                   "envs";   "tezos_embedded_raw_protocol_genesis";
                    "sigs"; "node_updater"; "node_shell"; ];
      }
   );

lib_with_alias(
      "tezos_embedded_protocol_demo",
      ocaml_with_opens,
      {
        modname = "Tezos_embedded_protocol_demo";
        subdir = "proto/demo";

           mlis = [
           ];
           mls = [
             "registerer.ml", "Registerer";
           ];
           requires = utils_packages + [ "envs";
                    "tezos_embedded_raw_protocol_demo";
                    "sigs"; "node_updater"; "node_shell"; ];
      }
   );


lib_with_opens("node_main_lib",
  ocaml + {
    files = [
        "node/main/node_data_version.ml";
        "node/main/node_config_file.ml";
        "node/main/node_shared_arg.ml";
        "node/main/node_config_command.ml";
        "node/main/node_identity_file.ml";
        "node/main/node_identity_command.ml";
        "node/main/node_run_command.ml";

    ];
    requires = [ "node_shell";

    ];
  });

lib_with_opens("client_lib",
  ocaml + {
    files = [
        "client/client_rpcs.ml";
        "client/client_commands.ml";
        "client/client_aliases.ml";
        "client/client_config.ml";
        "client/client_node_rpcs.ml";
        "client/client_generic_rpcs.ml";
        "client/client_helpers.ml";
        "client/client_keys.ml";
        "client/client_network.ml";
        "client/client_protocols.ml";
        "client/client_tags.ml";
    ];
    requires = [ "node_shell";

    ];
  });

begin
  opens =    [
     "-I"; "%{utils_FULL_DST_DIR}%";
     "-I"; "%{minutils_FULL_DST_DIR}%";
     "-open"; "Tezos_protocol_environment_genesis";
     "-open"; "Tezos_embedded_raw_protocol_genesis";
     ];


  ocaml = ocaml + {
  dep = ocaml_with_opens.dep + opens;
  bytecomp = ocaml_with_opens.bytecomp + opens;
  asmcomp = ocaml_with_opens.asmcomp + opens;
  };
  lib_with_alias(
      "client_embedded_genesis",
      ocaml,
      {
        modname = "Client_embedded_genesis";
        subdir = "client/embedded/genesis";

           mlis = [
           ];
           mls = [
             "client_proto_main.ml", "Client_proto_main";
           ];
           requires = utils_packages + [
                    "sigs"; "node_updater"; "node_shell"; "client_lib";
                         "tezos_embedded_raw_protocol_genesis";
                         "tezos_embedded_raw_protocol_alpha";
                    ];
      }
   );
end


lib_with_alias(
      "tezos_embedded_protocol_alpha",
      ocaml_with_opens,
      {
        modname = "Tezos_embedded_protocol_alpha";
        subdir = "proto/alpha";

           mlis = [
           ];
           mls = [
             "registerer.ml", "Registerer";
           ];
           requires = utils_packages + [ "envs";
              "tezos_embedded_raw_protocol_alpha";
                    "sigs"; "node_updater"; "node_shell"; ];
      }
   );


program_with_opens("tezos-node",
                   {
                     has_byte = false;
                     asmlink = [ "-linkall"; "-g" ];
                     bytelink = [ "-linkall"; "-g" ];
                     files = [
                         "node_main.ml";
                       ];
                     requires = [
                         "tezos_embedded_protocol_alpha";
                         "tezos_embedded_protocol_demo";
                         "tezos_embedded_protocol_genesis";

                         "minutils"; "utils"; "node_main_lib";
                       ] + more_packages;
                  });

begin
  opens =    [
     "-I"; "%{utils_FULL_DST_DIR}%";
     "-I"; "%{minutils_FULL_DST_DIR}%";
     "-I"; "%{tezos_protocol_environment_alpha_FULL_DST_DIR}%";
     "-open"; "Tezos_protocol_environment_alpha";
     "-I"; "%{tezos_embedded_raw_protocol_alpha_FULL_DST_DIR}%";
     "-open"; "Tezos_embedded_raw_protocol_alpha";
     "-open"; "Tezos_context";
     ];
  ocaml = ocaml + {
  dep = ocaml_with_opens.dep + opens;
  bytecomp = ocaml_with_opens.bytecomp + opens;
  asmcomp = ocaml_with_opens.asmcomp + opens;
  };
   
lib_with_opens(
        "client_embedded_alpha",
        ocaml + {
          files =
            OCaml.pack("Client_embedded_alpha", [
          
            "client/embedded/alpha/client_proto_rpcs.ml";
            "client/embedded/alpha/client_baking_blocks.ml";
            "client/embedded/alpha/client_baking_operations.ml";
            "client/embedded/alpha/client_baking_denunciation.ml";
            "client/embedded/alpha/client_baking_endorsement.ml";
            "client/embedded/alpha/client_baking_revelation.ml";
            "client/embedded/alpha/client_proto_nonces.ml";
            "client/embedded/alpha/client_baking_forge.ml";
            "client/embedded/alpha/client_baking_daemon.ml";
            "client/embedded/alpha/client_proto_args.ml";
            "client/embedded/alpha/client_proto_contracts.ml";
            "client/embedded/alpha/michelson_macros.ml";
            "client/embedded/alpha/michelson_v1_parser.ml";
            "client/embedded/alpha/michelson_v1_printer.ml";
            "client/embedded/alpha/michelson_v1_error_reporter.ml";
            "client/embedded/alpha/michelson_v1_emacs.ml";
            "client/embedded/alpha/client_proto_programs.ml";
            "client/embedded/alpha/client_proto_context.ml";
            "client/embedded/alpha/client_proto_main.ml";
            "client/embedded/alpha/client_baking_main.ml";
            "client/embedded/alpha/script_located_ir.ml";


          ]);
          requires = more_packages + [
           "tezos_protocol_environment_alpha";
            "tezos_embedded_raw_protocol_alpha";
            "client_lib";
          ];
        
        }
);
end

program_with_opens("tezos-client", {
                     has_byte = false;
                     asmlink =  [ "-linkall";"-g" ];
                     bytelink = [  "-linkall";"-g" ];
                     files = [
                         "client_main.ml";
                       ];
                     requires = [
                         "tezos_embedded_protocol_alpha";
                         "tezos_embedded_protocol_demo";
                         "tezos_embedded_protocol_genesis";
                         "minutils"; "utils"; "client_lib";
                         "sigs";
"micheline";
"tezos_protocol_compiler";
"node_db";
"node_net";
"node_updater";
"node_shell";
"tezos_protocol_environment_genesis";
"tezos_embedded_raw_protocol_genesis";
"tezos_embedded_protocol_genesis";
"tezos_protocol_environment_alpha";
"client_lib";
"tezos_embedded_raw_protocol_alpha";
"tezos_embedded_protocol_alpha";
"client_embedded_genesis";
"client_embedded_alpha";

                       ] + more_packages;
                   });


